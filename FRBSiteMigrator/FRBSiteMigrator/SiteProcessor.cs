using CsvHelper;
using FRBSiteMigrator.Models;
using Newtonsoft.Json;
using System;
using System.Globalization;
using System.Text;
using System.Text.RegularExpressions;

namespace FRBSiteMigrator
{
    /// <summary>
    /// This processes a CSV of pages that was created by dumping this query
    /// against the WordPress database via PhpMyAdmin to CSV:
    /// 
    /// SELECT 
    ///     p.ID, p.post_parent,
    ///     p.post_title,
    ///     p.post_content,
    ///     u.display_name as "author",
    ///     p.post_date, p.post_modified,
    ///     p.post_status, p.post_name, p.guid,
    ///     p.post_type,
    ///     p.post_mime_type
    /// FROM wp_posts p
    /// LEFT JOIN wp_users u ON u.ID = p.post_author
    /// WHERE p.post_type != "revision"
    /// ORDER BY ID
    /// 
    /// This is hardcoded to work against the CSV generated by that output.
    /// </summary>

    public class SiteProcessor
    {
        const string CsvFilename = "siteData.csv";
        const string JsonFilename = "siteContents.json";
        const string SiteFolder = "docs";
        const string MediaFolder = "media";
        Site site = new Site();
        Dictionary<string, string> mediaPaths = new Dictionary<string, string>();
        

        public SiteProcessor(string siteUrl)
        {
            site.SiteUrl = siteUrl;
        }

        public void Process()
        {
            ReadCsvIntoSiteContents();

            foreach(var content in site.AllContent)
            {
                content.ProcessedPath = GetUrlRecursive(content);
            }

            var json = JsonConvert.SerializeObject(site, Formatting.Indented);
            File.WriteAllText(JsonFilename, json);
        }

        public string GetUrlRecursive(SiteContent content)
        {
            // EARLY OUT: special handling of media
            if(content.Type == "attachment")
            {
                var url = content.Guid;
                var index = url.IndexOf("wp-content");
                return url.Substring(index).Replace("wp-content", "");
            }

            // EARLY OUT: special handling of posts
            if(content.Type == "post")
            {
                return "/news/" + content.Name;
            }

            var path = "";
            if(content.ParentId != 0)
            {
                var parent = site.Pages.Where(p => p.Id == content.ParentId).FirstOrDefault();
                if(parent != null)
                {
                    path += GetUrlRecursive(parent);
                }
            }
            return path + "/" + content.Name;

        }

        public void ReadCsvIntoSiteContents()
        {
            using(var reader = new StreamReader(CsvFilename))
            using(var csv = new CsvReader(reader, CultureInfo.InvariantCulture))
            {
                csv.Read();
                csv.ReadHeader();
                while(csv.Read())
                {
                    var content = new SiteContent
                    {
                        Id = csv.GetField<int>("ID"),
                        Type = csv.GetField("post_type"),
                        Author = csv.GetField("author"),
                        Created = csv.GetField<DateTime>("post_date"),
                        Name = csv.GetField("post_name"),
                        Guid = csv.GetField("guid"),
                        ParentId = csv.GetField<int>("post_parent"),
                        SiteStatus = csv.GetField("post_status"),
                        Title = csv.GetField("post_title"),
                        RawContent = csv.GetField("post_content"),                        
                    };
                    site.AddContent(content);
                }
            }
        }
    }
}
